-- Database Setup for University Management
-- Display all available databases
SHOW DATABASES;

-- Create and switch to VIT database if not exists
CREATE DATABASE IF NOT EXISTS University;
USE University;

-- Define CSE table structure
CREATE TABLE IF NOT EXISTS CSE_Dept (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(30) NOT NULL,
    student_score INT CHECK (student_score BETWEEN 0 AND 100),
    student_nationality VARCHAR(50) DEFAULT 'India'
);

-- Validate table creation
SHOW TABLES;

-- Insert sample student data
INSERT INTO CSE_Dept (student_id, student_name, student_score) 
VALUES (70, 'Alex', 78);

-- Display table structure
DESC CSE_Dept;

-- Modify table schema
ALTER TABLE CSE_Dept 
ADD COLUMN residence VARCHAR(200);

ALTER TABLE CSE_Dept 
DROP COLUMN residence;

ALTER TABLE CSE_Dept 
RENAME COLUMN student_nationality TO student_region;

-- Enable updates without safety restrictions
SET SQL_SAFE_UPDATES = 0;
UPDATE CSE_Dept 
SET student_region = 'France' 
WHERE student_id = 70;
SET SQL_SAFE_UPDATES = 1;

-- Transaction Practice Database
CREATE DATABASE IF NOT EXISTS TransactionsDB;
USE TransactionsDB;

CREATE TABLE IF NOT EXISTS Mechanical (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(25)
);

-- Transaction handling with savepoints
START TRANSACTION;
INSERT INTO Mechanical VALUES (201, 'Rahul');
SAVEPOINT SP1;
UPDATE Mechanical SET student_id = 202 WHERE student_id = 201;
SAVEPOINT SP2;
INSERT INTO Mechanical VALUES (203, 'Sanjay');
SAVEPOINT SP3;
ROLLBACK TO SP2;
COMMIT;

-- Corporate Database Setup
CREATE DATABASE IF NOT EXISTS Company;
USE Company;

CREATE TABLE IF NOT EXISTS Employees (
    EMP_ID INT PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME VARCHAR(25),
    LAST_NAME VARCHAR(25),
    SALARY INT,
    HIRE_DATE DATETIME,
    DEPARTMENT VARCHAR(25)
);

-- Insert employee data
INSERT INTO Employees (FIRST_NAME, LAST_NAME, SALARY, HIRE_DATE, DEPARTMENT) VALUES
('Sophia', 'Brown', 100000, '2014-02-20 09:00:00', 'HR'),
('Liam', 'Smith', 80000, '2014-06-11 09:00:00', 'Admin'),
('Ethan', 'Clark', 300000, '2014-02-20 09:00:00', 'HR'),
('Olivia', 'Johnson', 500000, '2014-02-20 09:00:00', 'Admin'),
('Emma', 'Davis', 500000, '2014-06-11 09:00:00', 'Admin'),
('Noah', 'Miller', 200000, '2014-06-11 09:00:00', 'Finance'),
('Ava', 'Wilson', 75000, '2014-01-20 09:00:00', 'Finance'),
('Isabella', 'Moore', 90000, '2014-04-11 09:00:00', 'Admin');

-- Queries for Data Analysis
-- 1. Employees in HR with salary over 200,000
SELECT * FROM Employees 
WHERE DEPARTMENT = 'HR' AND SALARY > 200000;

-- 2. Retrieve employees within a specific salary range
SELECT * FROM Employees 
WHERE SALARY BETWEEN 200000 AND 500000;

-- 3. Department statistics overview
SELECT 
    DEPARTMENT,
    COUNT(*) AS total_employees,
    AVG(SALARY) AS average_salary,
    MAX(SALARY) AS highest_salary,
    MIN(SALARY) AS lowest_salary
FROM Employees
GROUP BY DEPARTMENT
ORDER BY total_employees DESC;

-- 4. Retrieve top 2 departments by workforce size
SELECT DEPARTMENT, COUNT(*) AS total_employees
FROM Employees
GROUP BY DEPARTMENT
ORDER BY total_employees DESC
LIMIT 2;

-- 5. Maximum salary per department using window functions
SELECT DISTINCT DEPARTMENT,
MAX(SALARY) OVER (PARTITION BY DEPARTMENT) AS department_max_salary
FROM Employees;
-- 6. Retrieve top 3 highest salaries in the Administration department
SELECT * FROM Employee
WHERE Dept = 'Administration'
ORDER BY Salary DESC
LIMIT 3;

CREATE TABLE PersonInfo (
    ID INT PRIMARY KEY, 
    LastName VARCHAR(255) NOT NULL UNIQUE, 
    FirstName VARCHAR(255) NOT NULL UNIQUE, 
    Age INT
);

DESC PersonInfo;

INSERT INTO PersonInfo (ID, LastName, FirstName, Age) 
VALUES (1, 'Smith', 'Jane', 29);

SELECT * FROM PersonInfo;

CREATE TABLE CategoryInfo (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(25) NOT NULL UNIQUE,
    CategoryDescription VARCHAR(250) NOT NULL
);

INSERT INTO CategoryInfo VALUES (202, 'Electronics', 'Contains various electronic gadgets');
SELECT * FROM CategoryInfo;
DESC CategoryInfo;

USE OrganizationDB;
CREATE TABLE ProductDetails (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(250) NOT NULL,
    CategoryID INT,
    CONSTRAINT FK_Category FOREIGN KEY (CategoryID)
    REFERENCES CategoryInfo(CategoryID)
);

SHOW TABLES FROM OrganizationDB;
DESC ProductDetails;

DROP TABLE ProductDetails;

INSERT INTO ProductDetails VALUES (1001, 'Smartphone', NULL);
SELECT * FROM ProductDetails;

SELECT * FROM CategoryInfo;

DELETE FROM CategoryInfo WHERE CategoryID = 201;

DROP TABLE CategoryInfo;

USE OrganizationDB;

CREATE TABLE Students (
    StudentNo INT PRIMARY KEY,
    StudentName VARCHAR(20),
    Age INT
);

INSERT INTO Students (StudentNo, StudentName, Age) 
VALUES (10, 'Alex', 20),
       (11, 'Mia', 21),
       (12, 'Liam', 19);

SELECT * FROM Students;

CREATE TABLE CourseList (
    CourseNo INT PRIMARY KEY,
    CourseName VARCHAR(20)
);

SELECT * FROM CourseList;

INSERT INTO CourseList (CourseNo, CourseName) 
VALUES (201, 'Python'),
       (202, 'JavaScript'),
       (203, 'Data Science');

INSERT INTO CourseList (CourseNo, CourseName) 
VALUES (204, 'AI & ML'),
       (205, 'Cybersecurity'),
       (206, 'Cloud Computing');

CREATE TABLE Enrollment (
    StudentNo INT,
    CourseNo INT,
    JoinDate DATE,
    PRIMARY KEY(StudentNo, CourseNo),
    FOREIGN KEY(StudentNo) REFERENCES Students(StudentNo) ON DELETE CASCADE,
    FOREIGN KEY(CourseNo) REFERENCES CourseList(CourseNo) ON DELETE CASCADE
);

INSERT INTO Enrollment (StudentNo, CourseNo, JoinDate) 
VALUES (10, 201, '2022-01-10'),
       (10, 202, '2022-01-15'),
       (11, 203, '2022-01-20');

SELECT * FROM Enrollment;
-- 6. Retrieve top 3 highest salaries in the Administration department
SELECT * FROM Employee
WHERE Dept = 'Administration'
ORDER BY Salary DESC
LIMIT 3;

CREATE TABLE PersonInfo (
    ID INT PRIMARY KEY, 
    LastName VARCHAR(255) NOT NULL UNIQUE, 
    FirstName VARCHAR(255) NOT NULL UNIQUE, 
    Age INT
);

DESC PersonInfo;

INSERT INTO PersonInfo (ID, LastName, FirstName, Age) 
VALUES (1, 'Smith', 'Jane', 29);

SELECT * FROM PersonInfo;

CREATE TABLE CategoryInfo (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(25) NOT NULL UNIQUE,
    CategoryDescription VARCHAR(250) NOT NULL
);

INSERT INTO CategoryInfo VALUES (202, 'Electronics', 'Contains various electronic gadgets');
SELECT * FROM CategoryInfo;
DESC CategoryInfo;

USE OrganizationDB;
CREATE TABLE ProductDetails (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(250) NOT NULL,
    CategoryID INT,
    CONSTRAINT FK_Category FOREIGN KEY (CategoryID)
    REFERENCES CategoryInfo(CategoryID)
);

SHOW TABLES FROM OrganizationDB;
DESC ProductDetails;

DROP TABLE ProductDetails;

INSERT INTO ProductDetails VALUES (1001, 'Smartphone', NULL);
SELECT * FROM ProductDetails;

SELECT * FROM CategoryInfo;

DELETE FROM CategoryInfo WHERE CategoryID = 201;

DROP TABLE CategoryInfo;

USE OrganizationDB;

CREATE TABLE Students (
    StudentNo INT PRIMARY KEY,
    StudentName VARCHAR(20),
    Age INT
);

INSERT INTO Students (StudentNo, StudentName, Age) 
VALUES (10, 'Alex', 20),
       (11, 'Mia', 21),
       (12, 'Liam', 19);

SELECT * FROM Students;

CREATE TABLE CourseList (
    CourseNo INT PRIMARY KEY,
    CourseName VARCHAR(20)
);

SELECT * FROM CourseList;

INSERT INTO CourseList (CourseNo, CourseName) 
VALUES (201, 'Python'),
       (202, 'JavaScript'),
       (203, 'Data Science');

INSERT INTO CourseList (CourseNo, CourseName) 
VALUES (204, 'AI & ML'),
       (205, 'Cybersecurity'),
       (206, 'Cloud Computing');

CREATE TABLE Enrollment (
    StudentNo INT,
    CourseNo INT,
    JoinDate DATE,
    PRIMARY KEY(StudentNo, CourseNo),
    FOREIGN KEY(StudentNo) REFERENCES Students(StudentNo) ON DELETE CASCADE,
    FOREIGN KEY(CourseNo) REFERENCES CourseList(CourseNo) ON DELETE CASCADE
);

INSERT INTO Enrollment (StudentNo, CourseNo, JoinDate) 
VALUES (10, 201, '2022-01-10'),
       (10, 202, '2022-01-15'),
       (11, 203, '2022-01-20');

SELECT * FROM Enrollment;
INSERT INTO person1 (id, lastname, firstname, age) 
VALUES (1, 'Doe', 'John', 30);


SELECT * FROM person1;

create table category(
c_id int primary key,
c_name varchar(25) not null unique,
c_decrp varchar(250) not null
);

insert into category values (102, 'furnitures', 'it stores all set of wooden items');
select * from category;
desc category;

use org123;
CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id)
);
show tables from org123;
desc products;

drop table products;

insert into products values (904, 'Wooden table', null);
select * from products;


select * from category;

delete from category where c_id=101;

drop table category;

USE org123;


CREATE TABLE Student (
    sno INT PRIMARY KEY,
    sname VARCHAR(20),
    age INT

);


INSERT INTO Student(sno, sname,age) 
 VALUES(5,'skit',17),
       (7,'samya',18),
       (6,'samm',16);

SELECT *
FROM Student;

CREATE TABLE Course (
    cno INT PRIMARY KEY,
    cname VARCHAR(20)
);

SELECT *
FROM Course;

INSERT INTO Course(cno, cname) 
 VALUES(101,'c'),
       (102,'c++'),
       (103,'DBMS');

INSERT INTO Course(cno, cname) 
 VALUES(104,'c#'),
       (105,'java'),
       (106,'OS');

CREATE TABLE Enroll (
    sno INT,
    cno INT,
    jdate DATE,
    PRIMARY KEY(sno, cno),
    FOREIGN KEY(sno) REFERENCES Student(sno) ON DELETE CASCADE,
    FOREIGN KEY(cno) REFERENCES Course(cno) ON DELETE CASCADE
);

INSERT INTO Enroll(sno, cno, jdate) 
VALUES (1, 101, '2021-06-05'),
       (1, 102, '2021-06-05'),
       (2, 103, '2021-06-06');

SELECT * FROM Enroll;

DELETE FROM Student WHERE sname = 'Ramya';

SELECT * FROM Student;

SELECT * FROM Enroll;

INSERT INTO Enroll(sno, cno, jdate) 
VALUES(2, 105, "2021/05/05");
select * from enroll;
desc Enroll;

create database saturday;
use saturday;

create table category(
c_id int primary key,
c_name varchar(25) not null unique,
c_decrp varchar(250) not null
);

insert into category values (101, 'electronics', 'it stores all set of electronics items');
select * from category;
desc category;

CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id) on delete cascade
);

insert into products values (904, 'INTEL I5 Processor', 101);
select * from products;
delete from category where c_id=101;
select * from category;

CREATE TABLE Colleges (
    college_id INT PRIMARY KEY,
    college_name VARCHAR(50) NOT NULL
);

CREATE TABLE Subjects (
    subject_id INT PRIMARY KEY,
    subject_name VARCHAR(50) NOT NULL,
    college_id INT,
    FOREIGN KEY (college_id) REFERENCES Colleges(college_id) ON DELETE CASCADE
);

CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(50) NOT NULL,
    college_id INT,
    subject_id INT,
    FOREIGN KEY (college_id) REFERENCES Colleges(college_id) ON DELETE CASCADE,
    FOREIGN KEY (subject_id) REFERENCES Subjects(subject_id) ON DELETE CASCADE
);

INSERT INTO Colleges (college_id, college_name) VALUES
    (1, 'VIT Bhopal'),
    (2, 'IIT Indore'),
    (3, 'NIT Warangal');

INSERT INTO Subjects (subject_id, subject_name, college_id) VALUES
    (1, 'Computer Science', 1),
    (2, 'Mathematics', 1),
    (3, 'Physics', 2),
    (4, 'Electrical Engineering', 3);

INSERT INTO Students (student_id, student_name, college_id, subject_id) VALUES
    (1, 'Rahul Sharma', 1, 1),
    (2, 'Priya Jain', 1, 2),
    (3, 'Amit Verma', 2, 3),
    (4, 'Sneha Rao', 3, 4);

SELECT * FROM Colleges;
SELECT * FROM Subjects;
SELECT * FROM Students;

SELECT * FROM Worker 
WHERE SALARY > 200000 AND DEPARTMENT = 'HR';

SELECT * FROM Worker 
WHERE SALARY >= 200000;

SELECT * FROM Worker;

select * from worker where salary >= 200000 and salary <= 500000;

SELECT * FROM Worker
WHERE department = 'Admin' AND salary > 100000
ORDER by salary DESC;

SELECT * FROM Students WHERE s_name LIKE 'A%';
SELECT * FROM Students WHERE s_name LIKE 'd%';

CREATE DATABASE ORG123;
SHOW DATABASES;
USE ORG123;

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
        
		(002, 3500, '16-06-11');

SELECT * FROM Worker 
WHERE FIRST_NAME NOT IN ('Vipul', 'Satish');

SELECT * FROM Worker 
WHERE FIRST_NAME LIKE '%a';

SELECT * FROM Worker 
WHERE FIRST_NAME LIKE '_h';

create table vitBhopal (id int primary key, name varchar(20) not null,
department varchar(25) not null);
insert into vitbhopal values (104,'Karthik','cs'),(103,'Arun','cs');

create table vit (id int primary key, name varchar(20) not null,
college varchar(25) not null);
insert into vit values (104,'Karthik','chennai'),(103,'Arun','bhopal');
select * from vit;

select * from vitbhopal;

select name as WinnerOfTheYear from vitbhopal
where id = (select id from vit where college='bhopal');

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');
CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', '2016-02-20 00:00:00'),
 (002, 'Executive', '2016-06-11 00:00:00'),
 (008, 'Executive', '2016-06-11 00:00:00'),
 (005, 'Manager', '2016-06-11 00:00:00'),
 (004, 'Asst. Manager', '2016-06-11 00:00:00'),
 (007, 'Executive', '2016-06-11 00:00:00'),
 (006, 'Lead', '2016-06-11 00:00:00'),
 (003, 'Lead', '2016-06-11 00:00:00');
 
 CREATE TABLE vitbhopal (
  id INT PRIMARY KEY,
  name VARCHAR(20) NOT NULL,
  department VARCHAR(25) NOT NULL
);

INSERT INTO vitbhopal (id, name, department) 
VALUES (222, 'Karthik', 'cs'), (312, 'Arun', 'cs');

SELECT * FROM vitbhopal;

CREATE TABLE viteee (
  id INT PRIMARY KEY, 
  name VARCHAR(20) NOT NULL,
  college VARCHAR(25) NOT NULL
);

INSERT INTO viteee (id, name, college) 
VALUES (104, 'Karthik', 'chennai'), (103, 'Arun', 'bhopal');

SELECT * FROM viteee;

SELECT DEPARTMENT, COUNT(*) AS DEPARTMENT_COUNT 
FROM Worker
GROUP BY DEPARTMENT
HAVING COUNT(*) < 5;


SELECT *
FROM (
  SELECT *
  FROM Worker
  ORDER BY WORKER_ID DESC
  LIMIT 5
) AS subquery
ORDER BY WORKERID;

CREATE TABLE student12 (
    s_id INT PRIMARY KEY,
    s_name VARCHAR(25) NOT NULL,
    s_department VARCHAR(25) NOT NULL
);


INSERT INTO student12 VALUES 
(1001, 'Jayanth', 'ECE'),
(1002, 'Praveen', 'CSE'),
(1003, 'Logesh', 'Mech'),
(1006, 'Karthick', 'Aero'),
(1007, 'Mahesh', 'Civil');


SELECT * FROM student12;

DROP TABLE IF EXISTS vit;


CREATE TABLE VIT (
    s_id INT PRIMARY KEY,
    s_cgpa VARCHAR(5) NOT NULL
);


INSERT INTO VIT VALUES 
(1001, '7.2'),
(1002, '8.6'),
(1007, '9.25');

SELECT * FROM VIT;

SELECT * FROM  STUDENT CROSS JOIN VIT ;

SELECT * 
FROM Worker 
WHERE WORKER_ID IN (SELECT DISTINCT Manager_ID FROM Worker WHERE Manager_ID IS NOT NULL);
